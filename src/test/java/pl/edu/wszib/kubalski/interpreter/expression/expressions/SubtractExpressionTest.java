package pl.edu.wszib.kubalski.interpreter.expression.expressions;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import pl.edu.wszib.kubalski.interpreter.Context;
import pl.edu.wszib.kubalski.interpreter.expression.Expression;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class SubtractExpressionTest {

    /**
     * This class tests the functionality of the `interpret` method from the `SubtractExpression` class.
     * The `interpret` method calculates the difference between the values generated by two child `Expression` objects
     * (`left` and `right`) in a given context.
     */

    @Test
    public void testInterpret_subtractTwoPositiveNumbers() {
        // Given
        Context context = Context.builder().build();
        Expression leftExpression = Mockito.mock(Expression.class);
        Expression rightExpression = Mockito.mock(Expression.class);

        Mockito.when(leftExpression.interpret(context)).thenReturn(10.0);
        Mockito.when(rightExpression.interpret(context)).thenReturn(5.0);

        SubtractExpression subtractExpression = new SubtractExpression(leftExpression, rightExpression);

        // When
        Double result = subtractExpression.interpret(context);

        // Then
        assertEquals(5.0, result);
    }

    @Test
    public void testInterpret_subtractPositiveAndNegativeNumber() {
        // Given
        Context context = Context.builder().build();
        Expression leftExpression = Mockito.mock(Expression.class);
        Expression rightExpression = Mockito.mock(Expression.class);

        Mockito.when(leftExpression.interpret(context)).thenReturn(10.0);
        Mockito.when(rightExpression.interpret(context)).thenReturn(-5.0);

        SubtractExpression subtractExpression = new SubtractExpression(leftExpression, rightExpression);

        // When
        Double result = subtractExpression.interpret(context);

        // Then
        assertEquals(15.0, result);
    }

    @Test
    public void testInterpret_subtractTwoNegativeNumbers() {
        // Given
        Context context = Context.builder().build();
        Expression leftExpression = Mockito.mock(Expression.class);
        Expression rightExpression = Mockito.mock(Expression.class);

        Mockito.when(leftExpression.interpret(context)).thenReturn(-10.0);
        Mockito.when(rightExpression.interpret(context)).thenReturn(-5.0);

        SubtractExpression subtractExpression = new SubtractExpression(leftExpression, rightExpression);

        // When
        Double result = subtractExpression.interpret(context);

        // Then
        assertEquals(-5.0, result);
    }

    @Test
    public void testInterpret_subtractZeroFromNumber() {
        // Given
        Context context = Context.builder().build();
        Expression leftExpression = Mockito.mock(Expression.class);
        Expression rightExpression = Mockito.mock(Expression.class);

        Mockito.when(leftExpression.interpret(context)).thenReturn(10.0);
        Mockito.when(rightExpression.interpret(context)).thenReturn(0.0);

        SubtractExpression subtractExpression = new SubtractExpression(leftExpression, rightExpression);

        // When
        Double result = subtractExpression.interpret(context);

        // Then
        assertEquals(10.0, result);
    }

    @Test
    public void testInterpret_subtractNumberFromZero() {
        // Given
        Context context = Context.builder().build();
        Expression leftExpression = Mockito.mock(Expression.class);
        Expression rightExpression = Mockito.mock(Expression.class);

        Mockito.when(leftExpression.interpret(context)).thenReturn(0.0);
        Mockito.when(rightExpression.interpret(context)).thenReturn(10.0);

        SubtractExpression subtractExpression = new SubtractExpression(leftExpression, rightExpression);

        // When
        Double result = subtractExpression.interpret(context);

        // Then
        assertEquals(-10.0, result);
    }
}
